import {
  __commonJS
} from "./chunk-WDAFSW4C.js";
import "./chunk-7REXU52E.js";

// ../../../../../../node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js
var require_safe_node_apis = __commonJS({
  "src/runtime/browser/safe-node-apis.js"(exports, module) {
    const fs = void 0;
    const path = void 0;
    const cwd = void 0;
    module.exports = { fs, path, cwd };
  }
});
var safe_node_apis_default = require_safe_node_apis();

// ../../../../../../node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js
var throwMissingFsModule = (module) => {
  throw new Error(`Clerk: ${module} is missing. This is an internal error. Please contact Clerk's support.`);
};
var nodeFsOrThrow = () => {
  if (!safe_node_apis_default.fs) {
    throwMissingFsModule("fs");
  }
  return safe_node_apis_default.fs;
};
var nodePathOrThrow = () => {
  if (!safe_node_apis_default.path) {
    throwMissingFsModule("path");
  }
  return safe_node_apis_default.path;
};
var nodeCwdOrThrow = () => {
  if (!safe_node_apis_default.cwd) {
    throwMissingFsModule("cwd");
  }
  return safe_node_apis_default.cwd;
};

// ../../../../../../node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js
function hasSrcAppDir() {
  const { existsSync } = nodeFsOrThrow();
  const path = nodePathOrThrow();
  const cwd = nodeCwdOrThrow();
  const projectWithAppSrc = path.join(cwd(), "src", "app");
  return !!existsSync(projectWithAppSrc);
}
function suggestMiddlewareLocation() {
  const fileExtensions = ["ts", "js"];
  const suggestionMessage = (extension, to, from) => `Clerk: clerkMiddleware() was not run, your middleware file might be misplaced. Move your middleware file to ./${to}middleware.${extension}. Currently located at ./${from}middleware.${extension}`;
  const { existsSync } = nodeFsOrThrow();
  const path = nodePathOrThrow();
  const cwd = nodeCwdOrThrow();
  const projectWithAppSrcPath = path.join(cwd(), "src", "app");
  const projectWithAppPath = path.join(cwd(), "app");
  const checkMiddlewareLocation = (basePath, to, from) => {
    for (const fileExtension of fileExtensions) {
      if (existsSync(path.join(basePath, `middleware.${fileExtension}`))) {
        return suggestionMessage(fileExtension, to, from);
      }
    }
    return void 0;
  };
  if (existsSync(projectWithAppSrcPath)) {
    return checkMiddlewareLocation(projectWithAppSrcPath, "src/", "src/app/") || checkMiddlewareLocation(cwd(), "src/", "");
  }
  if (existsSync(projectWithAppPath)) {
    return checkMiddlewareLocation(projectWithAppPath, "", "app/");
  }
  return void 0;
}
export {
  hasSrcAppDir,
  suggestMiddlewareLocation
};
//# sourceMappingURL=middleware-location-JDAFJK3H.js.map
